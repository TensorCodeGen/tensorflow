# This script clones and builds the Tensor LLVM Extensions (TLX) repository and
# creates the necessary files such that Tensorflow can be built using TLX
# repository.
#
#
# Currently, TLX is built on top of LLVM version 12.0 and by identification, the
# corresponding stable release of tensorflow would be Tensorflow 2.6.3
# ==============================================================================

import subprocess as sb
import os
import glob


# Globals corresponding to specific urls and branches
TLX_REPO = "https://github.com/TensorCodeGen/tlx.git"
TLX_REPO_BRANCH = "tensorflow-2.6.3"


def exec(cmd, cwd = None):
    print(cmd)
    sb.call(cmd, cwd = cwd, shell=True)

def init_tlx(work_dir):
    build_dir = "llvm_dir"

    # Clone the TLX repository
    git_cmd = ["git","clone", TLX_REPO, "--branch", TLX_REPO_BRANCH, "--single-branch" ]
    git_cmd = " ".join(git_cmd)

    if not os.path.exists(build_dir):
        os.mkdir(build_dir)

    exec(git_cmd, cwd = build_dir)


    # Build and install TLX
    tlx_dir_root = os.path.join(build_dir, "tlx")

    install_tlx = ["bash", "install.sh"]
    install_tlx_cmd = " ".join(install_tlx)

    exec(install_tlx_cmd, cwd = tlx_dir_root)


    print("*"*5, "Successfully built TLX repository", "*"*5)


    llvm_project_dir = os.path.join(tlx_dir_root,"llvm-project")
    return llvm_project_dir


#  Tensorflow requires certain Bazel build files
#  in certain locations in the LLVM project repository.
#  Fortunately, these files are available in the repository
#  hence we simply copy these files over.
def extend_tlx_repo(tlx_dir_root):
    llvm_src = os.path.join(tlx_dir_root, "llvm")
    mlir_src = os.path.join(tlx_dir_root, "mlir")

    workspace_file = os.path.join(tlx_dir_root,"WORKSPACE")
    with open(workspace_file, "w+") as WORKSPACE:
        WORKSPACE.write("workspace(name = \"llvm-project\")"+"\n")

    cp_cmd = ["cp", os.path.join("third_party","llvm","llvm.autogenerated.BUILD"),
              os.path.join(llvm_src, "BUILD")]
    cp_cmd = " ".join(cp_cmd)

    exec(cp_cmd)



    cp_cmd = ["cp", os.path.join("third_party","mlir","BUILD"),
              os.path.join(mlir_src)]
    cp_cmd = " ".join(cp_cmd)

    exec(cp_cmd)



    cp_cmd = ["cp", os.path.join("third_party","mlir","test.BUILD"),
              os.path.join(mlir_src, "test","BUILD")]
    cp_cmd = " ".join(cp_cmd)

    exec(cp_cmd)




# Build the tensorflow pip package
# and install the package. We recommend
# running this script inside a python
# virtual environment as there are specific
# python package requirements

def build_tensorflow(tlx_dir_root):

    print("Configuring Tensorflow ...")
    configure_tf_cmd = ["python3", "configure.py"]
    configure_tf_cmd = " ".join(configure_tf_cmd)
    exec(configure_tf_cmd)

    bazel_build_cmd = ["bazel", "build", "--override_repository=llvm-project="+tlx_dir_root,  "//tensorflow/tools/pip_package:build_pip_package"]
    bazel_build_cmd = " ".join(bazel_build_cmd)


    print("Building Tensorflow  ...")
    exec(bazel_build_cmd)



    print("Building Tensorflow Pip Package ...")
    pip_cmd = ["./bazel-bin/tensorflow/tools/pip_package/build_pip_package" ,"/tmp/tensorflow_pkg"]
    pip_cmd = " ".join(pip_cmd)

    exec(pip_cmd)


    tf_packages = glob.glob("/tmp/tensorflow_pkg/tensorflow-2.6.3*")

    assert len(tf_packages) == 1, "Expected exactly one tensorflow package!"

    tf_package = tf_packages[0]


    print("Installing Tensorflow Pip Package ...")
    pip_install_cmd = ["pip3", "install", tf_package]
    pip_install_cmd = " ".join(pip_install_cmd)

    exec(pip_install_cmd)




def main():
    tlx_root = init_tlx()

    extend_tlx_repo(tlx_root)

    build_tensorflow(tlx_root)







if __name__ == '__main__':
    main()
